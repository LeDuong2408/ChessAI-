{"paragraphs":[{"text":"%pyspark\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport matplotlib\nmatplotlib.use(\"Agg\")\nimport matplotlib.pyplot as plt\nimport os\nimport numpy as np\nimport copy\nimport datetime\nimport pickle\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:36+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731848820944_-7971115","id":"20241117-200700_1937512990","dateCreated":"2024-11-17T20:07:00+0700","dateStarted":"2024-11-17T22:13:36+0700","dateFinished":"2024-11-17T22:13:36+0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:17973"},{"text":"%md\n# Các bộ chuyển đổi\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:36+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Các bộ chuyển đổi</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1731848388523_-319402926","id":"20241117-195948_720134118","dateCreated":"2024-11-17T19:59:48+0700","dateStarted":"2024-11-17T22:13:36+0700","dateFinished":"2024-11-17T22:13:36+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17974"},{"title":"Encode-Decode","text":"%pyspark\ndef board_to_tensor(board):\n    tensor = torch.zeros(12, 8, 8)  # Tạo tensor 12x8x8 với các giá trị ban đầu là 0\n    \n    piece_to_index = {\n        1: 0,   # White Pawn\n        3: 1,   # White Knight\n        4: 2,   # White Bishop\n        5: 3,   # White Rook\n        9: 4,   # White Queen\n        10: 5,  # White King\n        -1: 6,  # Black Pawn\n        -3: 7,  # Black Knight\n        -4: 8,  # Black Bishop\n        -5: 9,  # Black Rook\n        -9: 10, # Black Queen\n        -10: 11 # Black King\n    }\n    \n    for row in range(8):\n        for col in range(8):\n            piece = board[row][col]\n            if piece != 0:\n                index = piece_to_index[piece]\n                tensor[index, row, col] = 1  \n    return tensor\ndef tensor_to_board(tensor):\n    \"\"\"\n    Chuyển đổi tensor (12x8x8) về ma trận bàn cờ 8x8.\n    Args:\n        tensor (torch.Tensor): Tensor 12x8x8 chứa thông tin trạng thái bàn cờ.\n    Returns:\n        list: Bàn cờ 8x8 dưới dạng danh sách lồng nhau.\n    \"\"\"\n    board = [[0 for _ in range(8)] for _ in range(8)]  # Khởi tạo ma trận 8x8 toàn số 0\n    \n    index_to_piece = {\n        0: 1,    # White Pawn\n        1: 3,    # White Knight\n        2: 4,    # White Bishop\n        3: 5,    # White Rook\n        4: 9,    # White Queen\n        5: 10,   # White King\n        6: -1,   # Black Pawn\n        7: -3,   # Black Knight\n        8: -4,   # Black Bishop\n        9: -5,   # Black Rook\n        10: -9,  # Black Queen\n        11: -10  # Black King\n    }\n    \n    for index in range(12):\n        for row in range(8):\n            for col in range(8):\n                if tensor[index, row, col] == 1:\n                    piece = index_to_piece[index]\n                    board[row][col] = piece\n    return board\n\ndef index_to_coords(index, num_cols):\n    i = index // num_cols\n    j = index % num_cols\n    return [i, j]\n\ndef coords_to_index(row, col, num_cols):\n    return row * num_cols + col\n\ndef index_to_action(index):\n    start_pos, end_pos = index_to_coords(index, 64)\n    return index_to_coords(start_pos, 8), index_to_coords(end_pos, 8)\n\ndef action_to_index(start_pos, end_pos):\n    coord_start = coords_to_index(start_pos[0],start_pos[1], 8)\n    coord_end = coords_to_index(end_pos[0], end_pos[1], 8)\n    return coords_to_index(coord_start, coord_end, 64)\n\n\n","user":"anonymous","dateUpdated":"2024-11-17T22:22:32+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true,"lineNumbers":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731848337544_431942916","id":"20241117-195857_753226665","dateCreated":"2024-11-17T19:58:57+0700","dateStarted":"2024-11-17T22:22:32+0700","dateFinished":"2024-11-17T22:22:32+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17975"},{"title":"Chess environment","text":"%pyspark\nclass ChessEnv:\n    def __init__(self, board, player_turn=0):\n        self.initBoard = board\n        self.init_player_turn = player_turn\n        self.position_history = {}\n        self.reset()\n\n    def reset(self):\n        self.board = np.array(self.initBoard)\n        self.player_turn = self.init_player_turn\n        self.castling = [1, 1, 1, 1]\n        self.pos_pawn_shielding = []\n        self.is_check = False\n        self.is_term = False\n        self.is_truncate = False\n        self.move_counter = 0\n        self.flag_pawn_shielding = False\n        self.position_history.clear()\n        self.move_counter = 0\n        self.record_position()\n\n    def board_to_tuple(self):\n        \"\"\"\n        Convert the board to a hashable tuple representation for history tracking.\n        \"\"\"\n        return tuple(map(tuple, self.board))\n        \n    def record_position(self):\n        \"\"\"\n        Record the current board position in the history.\n        \"\"\"\n        board_tuple = self.board_to_tuple()\n        if board_tuple in self.position_history:\n            self.position_history[board_tuple] += 1\n        else:\n            self.position_history[board_tuple] = 1\n\n    def getState(self):\n        return self.board, int(self.player_turn)\n        \n    def updateCastling(self, piece, start_pos):\n        if piece == 10:\n            self.castling[0], self.castling[1] = 0, 0\n        elif piece == -10:\n            self.castling[2], self.castling[3] = 0, 0\n        elif piece == 5:\n            if start_pos[1] == 0:\n                self.castling[0] = 0\n            elif start_pos[1] == 7:\n                self.castling[1] = 0\n        elif piece == -5:\n            if start_pos[1] == 0:\n                self.castling[2] = 0\n            elif start_pos[1] == 7:\n                self.castling[3] = 0\n                \n    def step(self, start_pos, end_pos):\n        piece = self.board[start_pos[0]][start_pos[1]]\n        self.isCheck()\n        if piece == 0 or (piece > 0 and self.player_turn % 2 != 0) or (piece < 0 and self.player_turn % 2 == 0):\n            # print(\"Invalid move: Either no piece at start or incorrect player's turn.\")\n            return False\n        \n        if not self.is_valid_move(start_pos, end_pos):\n            # print(\"Invalid move: Move not allowed by chess rules.\")\n            return False\n        \n        piece_start = self.board[start_pos[0]][start_pos[1]]\n        piece_end = self.board[end_pos[0]][end_pos[1]]\n        \n        if abs(piece_start) == 1:\n            if end_pos[0] == 0 or end_pos[0] == 7:  # Pawn reaches promotion row\n                self.board[end_pos[0]][end_pos[1]] = 9 * piece_start  # Promote to queen\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.flag_pawn_shielding = True  # Set flag to indicate promotion\n                self.pos_pawn_shielding.append([piece_start, end_pos[0], end_pos[1]])  # Track promotion\n                \n            elif piece_end == 0:\n                self.board[end_pos[0]][end_pos[1]] = piece_start\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.board[start_pos[0]][end_pos[1]] = 0\n            elif piece_end != 0:  # Reset counter if a pawn moves or a piece is captured\n                self.move_counter = 0\n                self.board[end_pos[0]][end_pos[1]] = piece_start\n                self.board[start_pos[0]][start_pos[1]] = 0\n            else:\n                self.move_counter += 1\n            \n        elif piece_start == 10 and piece_end == 5:\n            if end_pos[1] == 0:\n                self.board[start_pos[0]][start_pos[1]-2] = piece_start\n                self.board[start_pos[0]][start_pos[1]-1] = piece_end\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.board[end_pos[0]][end_pos[1]] = 0\n            if end_pos[1] == 7:\n                self.board[start_pos[0]][start_pos[1]+2] = piece_start\n                self.board[start_pos[0]][start_pos[1]+1] = piece_end\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.board[end_pos[0]][end_pos[1]] = 0\n        elif piece_start == -10 and piece_end == -5:\n            if end_pos[1] == 0:\n                self.board[start_pos[0]][start_pos[1]-2] = piece_start\n                self.board[start_pos[0]][start_pos[1]-1] = piece_end\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.board[end_pos[0]][end_pos[1]] = 0\n            if end_pos[1] == 7:\n                self.board[start_pos[0]][start_pos[1]+2] = piece_start\n                self.board[start_pos[0]][start_pos[1]+1] = piece_end\n                self.board[start_pos[0]][start_pos[1]] = 0\n                self.board[end_pos[0]][end_pos[1]] = 0\n        else:\n            self.board[end_pos[0]][end_pos[1]] = piece_start\n            self.board[start_pos[0]][start_pos[1]] = 0\n            \n        # Update move counter\n        \n                \n        self.updateCastling(piece_start, start_pos)\n        self.record_position()\n        self.isCheck()\n        \n        if self.is_check:\n            self.is_term = True\n        else:\n            self.player_turn += 1 \n            self.isCheck()\n            self.isTerm()\n            \n        if self.isTruncate():\n            self.is_truncate = True\n\n            if self.move_counter >= 50:\n                print(\"Draw! No pawn movement or capture in the last 50 moves.\")\n            elif self.position_history.get(self.board_to_tuple(), 0) >= 3:\n                print(\"Draw! Position repeated three times.\")\n            elif self.insufficient_material():\n                print(\"Draw! Insufficient material to checkmate.\")\n            elif self.isStalemate():\n                print(\"Draw! Stalemate – no legal moves available for the player on turn.\")\n            return True\n\n        if self.is_term:\n            print(f\"Checkmate! Player {'White' if piece < 0 else 'Black'} wins!\")\n            return True\n        \n        return True  \n        \n    def pawn_shielding(self, promotion_piece):\n        if len(self.pos_pawn_shielding) == 0:\n            return False\n        player, end_pos_row, end_pos_col = self.pos_pawn_shielding[0]\n        promotion_piece = promotion_piece * player\n        self.board[end_pos_row][end_pos_col] = promotion_piece\n        self.pos_pawn_shielding.clear()\n        self.flag_pawn_shielding = True\n        self.isCheck()\n        self.isTerm()\n        return True\n        \n    def isCheck(self):\n        king_value = 10 if self.player_turn % 2 == 0 else -10\n        king_pos = np.argwhere(self.board == king_value)[0] \n        opposing_pieces = [-1, -3, -4, -5, -9, -10] if self.player_turn % 2 == 0 else [1, 3, 4, 5, 9, 10]\n        for i in range(8):\n            for j in range(8):\n                piece = self.board[i, j]\n                if piece == opposing_pieces[0]:  \n                    if self.player_turn % 2 == 0:\n                        pawn_attacks = [(-1, -1), (-1, 1)]\n                    else: \n                        pawn_attacks = [(1, -1), (1, 1)]  \n                    \n                    for dx, dy in pawn_attacks:\n                        new_pos = [i + dx, j + dy]\n                        if 0 <= new_pos[0] < 8 and 0 <= new_pos[1] < 8:\n                            if self.board[new_pos[0]][new_pos[1]] == king_value:\n                                self.is_check = True  \n                                return self.is_check\n                elif piece == opposing_pieces[1]: \n                    knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n                    for dx, dy in knight_moves:\n                        new_pos = [i + dx, j + dy]\n                        if 0 <= new_pos[0] < 8 and 0 <= new_pos[1] < 8:\n                            if self.board[new_pos[0]][new_pos[1]] == king_value:\n                                self.is_check = True  \n                                return self.is_check\n                elif piece in opposing_pieces:\n                    valid_moves = self.getSpaceAction([i, j])\n                    if tuple(king_pos) in valid_moves:\n                        self.is_check = True \n                        return self.is_check\n        self.is_check = False  \n        return self.is_check\n        \n        \n    def isTruncate(self):\n        \"\"\"\n        Check if the current board position has repeated three times, if 50 moves have occurred without pawn movement or capture, if there is insufficient material to checkmate, or if it is a stalemate.\n        \"\"\"\n        board_tuple = self.board_to_tuple()\n        if self.position_history.get(board_tuple, 0) >= 3:\n            self.is_truncate = True\n            return True\n        if self.move_counter >= 50:\n            self.is_truncate = True\n            return True\n        if self.insufficient_material():\n            self.is_truncate = True\n            return True\n        if self.isStalemate():\n            self.is_truncate = True\n            return True\n        return False\n\n    def insufficient_material(self):\n        \"\"\"\n        Check if there is insufficient material to checkmate, leading to a draw.\n        \"\"\"\n        pieces = []\n        for row in self.board:\n            for piece in row:\n                if piece != 0:\n                    pieces.append(piece)\n\n        # Case 1: King versus King\n        if len(pieces) == 2 and 10 in pieces and -10 in pieces:\n            return True\n\n        # Case 2: King and Bishop versus King\n        if len(pieces) == 3:\n            if (10 in pieces and -10 in pieces and (4 in pieces or -4 in pieces)) or \\\n               (-10 in pieces and 10 in pieces and (4 in pieces or -4 in pieces)):\n                return True\n\n        # Case 3: King and Knight versus King\n        if len(pieces) == 3:\n            if (10 in pieces and -10 in pieces and (3 in pieces or -3 in pieces)) or \\\n               (-10 in pieces and 10 in pieces and (3 in pieces or -3 in pieces)):\n                return True\n\n        # Case 4: King and Bishop versus King and Bishop (same color bishops)\n        if len(pieces) == 4:\n            if 10 in pieces and -10 in pieces:\n                bishops = [piece for piece in pieces if abs(piece) == 4]\n                if len(bishops) == 2:\n                    # Check if bishops are on the same color\n                    bishop_positions = [(i, j) for i in range(8) for j in range(8) if abs(self.board[i][j]) == 4]\n                    if len(bishop_positions) == 2:\n                        pos1, pos2 = bishop_positions\n                        if (pos1[0] + pos1[1]) % 2 == (pos2[0] + pos2[1]) % 2:\n                            return True\n\n        return False\n        \n    def isStalemate(self):\n        \"\"\"\n        Check if the current player has no legal moves but is not in check (stalemate).\n        \"\"\"\n        isCheck_temp = self.is_check\n        \n        if self.is_check:\n            return False\n\n        for i in range(8):\n            for j in range(8):\n                piece = self.board[i, j]\n                if (self.player_turn % 2 == 0 and piece > 0) or (self.player_turn % 2 != 0 and piece < 0):\n                    valid_moves = self.getSpaceAction([i, j])\n                    for move in valid_moves:\n                        original_piece = self.board[move[0], move[1]]\n                        self.board[move[0], move[1]] = piece\n                        self.board[i, j] = 0\n\n                        if not self.isCheck():\n                            self.board[move[0], move[1]] = original_piece\n                            self.board[i, j] = piece\n                            self.is_check = isCheck_temp\n                            return False\n\n                        self.board[move[0], move[1]] = original_piece\n                        self.board[i, j] = piece\n                        \n                        if self.isCheck():\n                            continue\n                        \n        self.is_check = isCheck_temp\n        return True\n        \n    def isTerm(self):\n        isCheck_temp = self.is_check\n\n        if not self.is_check:\n            self.is_term = False  \n            return self.is_term\n        for i in range(8):\n            for j in range(8):\n                piece = self.board[i, j]\n                if (self.player_turn % 2 == 0 and piece > 0) or (self.player_turn % 2 != 0 and piece < 0):\n                    valid_moves = self.getSpaceAction([i, j])\n                    for move in valid_moves:\n                        original_piece = self.board[move[0], move[1]]\n                        self.board[move[0], move[1]] = piece\n                        self.board[i, j] = 0  \n    \n                        if not self.isCheck():\n                            self.board[move[0], move[1]] = original_piece\n                            self.board[i, j] = piece\n                            self.is_check = isCheck_temp\n                            self.is_term = False  \n                            return self.is_term\n                            \n                        self.board[move[0], move[1]] = original_piece\n                        self.board[i, j] = piece\n                        \n                        if self.isCheck():\n                            continue\n        \n        self.is_check = isCheck_temp\n        self.is_term = True\n        return self.is_term\n    \n    def is_valid_move(self, start_pos, end_pos):\n        piece = self.board[start_pos[0]][start_pos[1]]\n        \n        if not (0 <= end_pos[0] < 8 and 0 <= end_pos[1] < 8):\n            # print(\"Invalid move: Out of board\")\n            return False\n        \n        valid_moves = self.getSpaceAction(start_pos)\n        valid_moves = [list(move) for move in valid_moves]\n        if end_pos not in valid_moves:\n            # print(f\"Invalid move: {end_pos} not in valid moves: {valid_moves}\")\n            return False\n    \n        return True\n    \n    def get_all_actions(self):\n        \"\"\"\n        Trả về tất cả các hành động hợp lệ từ trạng thái hiện tại.\n        Một hành động là một tuple (start_pos, end_pos).\n        \"\"\"\n        all_actions = []\n        for i in range(8):  # Duyệt qua các hàng\n            for j in range(8):  # Duyệt qua các cột\n                piece = self.board[i, j]\n                # Kiểm tra quân cờ có thuộc người chơi hiện tại không\n                if (self.player_turn % 2 == 0 and piece > 0) or (self.player_turn % 2 != 0 and piece < 0):\n                    valid_moves = self.getSpaceAction([i, j])\n                    for move in valid_moves:\n                        # Chỉ thêm nước đi nếu hợp lệ\n                        if self.is_valid_move([i, j], move):\n                            all_actions.append(([i, j], move))\n        return all_actions\n\n    \n    def getSpaceAction(self, pos):\n        piece = self.board[pos[0]][pos[1]]\n        valid_moves = []\n        \n        if piece == 1:  \n            if pos[0] + 1 < 8 and self.board[pos[0] + 1][pos[1]] == 0:\n                valid_moves.append([pos[0] + 1, pos[1]])\n            if pos[0] == 1 and pos[0] + 2 < 8 and self.board[pos[0] + 1][pos[1]] == 0 and self.board[pos[0] + 2][pos[1]] == 0:\n                valid_moves.append([pos[0] + 2, pos[1]])\n            if pos[0] + 1 < 8 and pos[1] - 1 >= 0 and self.board[pos[0] + 1][pos[1] - 1] < 0:\n                valid_moves.append([pos[0] + 1, pos[1] - 1])\n            if pos[0] + 1 < 8 and pos[1] + 1 < 8 and self.board[pos[0] + 1][pos[1] + 1] < 0:\n                valid_moves.append([pos[0] + 1, pos[1] + 1])\n            if pos[0] == 4:\n                if pos[1] - 1 >= 0 and self.board[pos[0]][pos[1] - 1] == -1:\n                    valid_moves.append([pos[0] + 1, pos[1] - 1])\n                if pos[1] + 1 < 8 and self.board[pos[0]][pos[1] + 1] == -1:\n                    valid_moves.append([pos[0] + 1, pos[1] + 1])\n\n        elif piece == -1:  \n            if pos[0] - 1 >= 0 and self.board[pos[0] - 1][pos[1]] == 0: \n                valid_moves.append([pos[0] - 1, pos[1]])\n            if pos[0] == 6 and pos[0] - 2 >= 0 and self.board[pos[0] - 1][pos[1]] == 0 and self.board[pos[0] - 2][pos[1]] == 0:\n                valid_moves.append([pos[0] - 2, pos[1]])\n            if pos[0] - 1 >= 0 and pos[1] - 1 >= 0 and self.board[pos[0] - 1][pos[1] - 1] > 0:\n                valid_moves.append([pos[0] - 1, pos[1] - 1])\n            if pos[0] - 1 >= 0 and pos[1] + 1 < 8 and self.board[pos[0] - 1][pos[1] + 1] > 0:\n                valid_moves.append([pos[0] - 1, pos[1] + 1])\n            if pos[0] == 3:\n                if pos[1] - 1 >= 0 and self.board[pos[0]][pos[1] - 1] == 1:\n                    valid_moves.append([pos[0] - 1, pos[1] - 1])\n                if pos[1] + 1 < 8 and self.board[pos[0]][pos[1] + 1] == 1:\n                    valid_moves.append([pos[0] - 1, pos[1] + 1])\n\n    \n        elif abs(piece) == 3:\n            knight_moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n            for dx, dy in knight_moves:\n                new_pos = [pos[0] + dx, pos[1] + dy]\n                if 0 <= new_pos[0] < 8 and 0 <= new_pos[1] < 8:\n                    target_piece = self.board[new_pos[0]][new_pos[1]]\n                    if target_piece == 0 or (target_piece < 0) != (piece < 0): \n                        valid_moves.append(new_pos)\n    \n        elif abs(piece) == 4: \n            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n            valid_moves.extend(self.generate_sliding_moves(pos, directions))\n    \n        elif abs(piece) == 5: \n            directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n            valid_moves.extend(self.generate_sliding_moves(pos, directions))\n    \n        elif abs(piece) == 9: \n            directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n            valid_moves.extend(self.generate_sliding_moves(pos, directions))\n    \n        elif abs(piece) == 10:  \n            king_moves = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n            for dx, dy in king_moves:\n                new_pos = [pos[0] + dx, pos[1] + dy]\n                if 0 <= new_pos[0] < 8 and 0 <= new_pos[1] < 8:\n                    target_piece = self.board[new_pos[0]][new_pos[1]]\n                    if target_piece == 0 or (target_piece < 0) != (piece < 0):\n                        valid_moves.append(new_pos)\n            \n            if not self.is_check:\n                if piece == 10 :\n                    if self.castling[0] == 1:\n                        arr = self.board[pos[0]][1:pos[1]]\n                        if all(num == 0 for num in arr):\n                            valid_moves.append((0, 0))\n                    if self.castling[1] == 1:\n                        arr = self.board[pos[0]][pos[1]+1:7]\n                        if all(num == 0 for num in arr):\n                            valid_moves.append((0, 7))\n                elif piece == -10 :\n                    if self.castling[2] == 1:\n                        arr = self.board[pos[0]][1:pos[1]]\n                        if all(num == 0 for num in arr):\n                            valid_moves.append((7, 0))\n                    if self.castling[3] == 1:\n                        arr = self.board[pos[0]][pos[1]+1:7]\n                        if all(num == 0 for num in arr):\n                            valid_moves.append((7, 7))\n        return valid_moves\n\n    def generate_sliding_moves(self, position, directions):\n        moves = []\n        for dx, dy in directions:\n            x, y = position[0], position[1]\n            while True:\n                x += dx\n                y += dy\n                if 0 <= x < 8 and 0 <= y < 8:\n                    if self.board[x][y] == 0:\n                        moves.append((x, y))\n                    elif (self.board[x][y] < 0) != (self.board[position[0]][position[1]] < 0):\n                        moves.append((x, y))\n                        break\n                    else:\n                        break\n                else:\n                    break\n        return moves\n\n    def getScore(self, player, action, pre_state):\n        \"\"\"\n        Tính điểm cho người chơi player sau khi thực hiện hành động action.\n        \"\"\"\n        score = 0\n    \n        current_player = 1 if (self.player_turn - 1) % 2 == 0 else -1\n    \n        piece_values = {1: 0.005, 3: 0.03, 4: 0.03, 5: 0.05, 9: 0.09}\n    \n        start_piece = pre_state[action[0][0]][action[0][1]]\n        end_piece = pre_state[action[1][0]][action[1][1]]\n        \n        if abs(start_piece) == 1 and action[0][1] != action[1][1] and end_piece == 0:\n            captured_pawn_position = (action[0][0], action[1][1])\n            captured_pawn = pre_state[captured_pawn_position[0]][captured_pawn_position[1]]\n\n            if captured_pawn * player < 0:  \n                score += piece_values[1] \n            elif captured_pawn * player > 0:  \n                score -= piece_values[1]\n    \n        elif end_piece != 0:\n            if end_piece * player < 0:  \n                score += piece_values.get(abs(end_piece), 0)\n            else:  \n                score -= piece_values.get(abs(end_piece), 0)\n    \n        if abs(start_piece) == 1 and (action[1][0] == 0 or action[1][0] == 7):\n            if player == current_player:\n                score += 0.03  \n            else: \n                score -= 0.03 \n\n        if self.is_check:\n            if player == current_player:\n                score += 0.01  \n            else:\n                score -= 0.01\n\n        if self.is_term:\n            if player == current_player:\n                score += 1\n            else:\n                score -= 1\n    \n    \n        # Trả về tổng điểm đã tính\n        print(f\"Score for player {player}: {score}\")\n        return score\n\n\n    def __str__(self):\n        symbols = {1: 'P', 3: 'N', 4: 'B', 5: 'R', 9: 'Q', 10: 'K', \n                   -1: 'p', -3: 'n', -4: 'b', -5: 'r', -9: 'q', -10: 'k', 0: '.'}\n        return \"\\n\".join([\" \".join([symbols[cell] for cell in row]) for row in self.board])\n    \ndef envModel(s, a, player):\n    action = index_to_action(a)\n    state = tensor_to_board(s)\n    p = 0 if player == 1 else 1\n    env = ChessEnv(state, player_turn= p)\n    step_check = env.step(action[0], action[1])\n    next_s, player_turn = env.getState()\n    next_player = 1 if (player_turn % 2) == 0 else -1\n    terminated, truncation = env.is_term, env.is_truncate\n    next_state = board_to_tensor(next_s)\n    return next_state, next_player, terminated, truncation, step_check\n    \ndef get_all_action_index(board_tensor, player):\n    board = tensor_to_board(board_tensor)\n    player_turn = 0 if player > 0 else 1\n    chess = ChessEnv(board, player_turn)\n    allAction = chess.get_all_actions()\n    all_action_index = []\n    for action in allAction:\n        all_action_index.append(action_to_index(action[0], action[1]))\n    return all_action_index\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731480764232_-17500647","id":"20241024-224442_7448758","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17976"},{"title":"Alpha Net","text":"%pyspark\nclass board_data(Dataset):\n    def __init__(self, dataset):  # dataset = np.array of (s, p, v)\n        \"\"\"\n        Dùng để xử lý dữ liệu.\n        Args:\n            dataset (np.array): Array of tuples (s, p, v).\n                s: state (12 × 8 × 8 tensor)\n                p: policy\n                v: value\n        \"\"\"\n        if isinstance(dataset, np.ndarray):\n            self.X = dataset[:, 0]\n            self.y_p = dataset[:, 1]\n            self.y_v = dataset[:, 2]\n        else:\n            self.X = [item[0] for item in dataset]\n            self.y_p = [item[1] for item in dataset]\n            self.y_v = [item[2] for item in dataset]\n        # self.X = dataset[:, 0]  # Trạng thái đã ở dạng 12 × 8 × 8\n        # self.y_p, self.y_v = dataset[:, 1], dataset[:, 2]\n    \n    def __len__(self):\n        return len(self.X)  # Lấy độ dài của dataset\n    \n    def __getitem__(self, idx):\n        \"\"\"\n        Lấy 1 điểm data.\n        Args:\n            idx (int): Index của điểm data\n        Returns:\n            tuple: state, policy, value \n        \"\"\"\n        return self.X[idx], self.y_p[idx], self.y_v[idx]\n\nclass ConvBlock(nn.Module):\n    def __init__(self):\n        super(ConvBlock, self).__init__()\n        self.conv1 = nn.Conv2d(12, 256, 3, stride=1, padding=1)\n        self.bn1 = nn.BatchNorm2d(256)\n\n    def forward(self, s):\n        s = F.relu(self.bn1(self.conv1(s)))\n        return s\n\nclass ResBlock(nn.Module):\n    def __init__(self, inplanes=256, planes=256, stride=1, downsample=None):\n        super(ResBlock, self).__init__()\n        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=3, stride=stride, padding=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(planes)\n        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)\n        self.bn2 = nn.BatchNorm2d(planes)\n\n    def forward(self, x):\n        residual = x\n        out = self.conv1(x)\n        out = F.relu(self.bn1(out))\n        out = self.conv2(out)\n        out = self.bn2(out)\n        out += residual\n        out = F.relu(out)\n        return out\n    \nclass OutBlock(nn.Module):\n    def __init__(self):\n        super(OutBlock, self).__init__()\n        self.conv = nn.Conv2d(256, 1, kernel_size=1)  # value head\n        self.bn = nn.BatchNorm2d(1)\n        self.fc1 = nn.Linear(8 * 8, 64)\n        self.fc2 = nn.Linear(64, 1)\n        \n        self.conv1 = nn.Conv2d(256, 128, kernel_size=1)  # policy head\n        self.bn1 = nn.BatchNorm2d(128)\n        self.logsoftmax = nn.LogSoftmax(dim=1)\n        self.fc = nn.Linear(8 * 8 * 128, 4095) \n    \n    def forward(self, s):\n        # Value head\n        v = F.relu(self.bn(self.conv(s)))\n        v = v.view(-1, 8 * 8)\n        v = F.relu(self.fc1(v))\n        v = torch.tanh(self.fc2(v))\n        \n        # Policy head\n        p = F.relu(self.bn1(self.conv1(s)))\n        p = p.view(-1, 8 * 8 * 128)\n        p = self.fc(p)\n        p = F.softmax(p, dim=1)\n        # p = self.logsoftmax(p)\n        return p, v\n\nclass ChessNet(nn.Module):\n    def __init__(self):\n        super(ChessNet, self).__init__()\n        self.conv = ConvBlock()\n        for block in range(19):\n            setattr(self, \"res_%i\" % block, ResBlock())\n        self.outblock = OutBlock()\n    \n    def forward(self, s):\n        \"\"\"\n        ChessNet model.\n        Args:\n            s (torch.Tensor): Trạng thái.\n        Returns:\n            tuple: Policy, value được dự đoán.\n        \"\"\"\n        s = self.conv(s)\n        for block in range(19):\n            s = getattr(self, \"res_%i\" % block)(s)\n        p, v = self.outblock(s)\n        return p, v\n    \n    def _initialize_weights(self):\n        \"\"\"\n        Khởi tạo trọng số mặc định cho các lớp trong mạng.\n        \"\"\"\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n                if m.bias is not None:\n                    nn.init.constant_(m.bias, 0)\n            elif isinstance(m, nn.BatchNorm2d):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n            elif isinstance(m, nn.Linear):\n                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n                nn.init.constant_(m.bias, 0)\n\nclass AlphaLoss(torch.nn.Module):\n    def __init__(self, alpha=0.5, eps=1e-8):\n        super(AlphaLoss, self).__init__()\n        self.alpha = alpha\n        self.eps = eps\n\n    def forward(self, y_value, value, y_policy, policy):\n        \"\"\"\n        Hàm loss để tối ưu mô hình\n        Args:\n            y_value (int): giá trị được dự đoán xác xuất chiến thắng \n            value (int): giá trị lấy từ MCTS (label) xác xuất chiến thắng \n            y_policy (array): chính sách được dự đoán (xác suất các hành động) \n            policy (array): chính sách tù MCTS (label) (xác suất các hành động)\n        return (float): giá trị lỗi dựa trên giá trị và chính sách\n        \"\"\"\n        value_error = abs(value - y_value)\n        policy = policy.squeeze(-1)\n        policy_error = torch.sum((-policy * torch.log(torch.clamp(y_policy.float(), min=self.eps))), dim=1)\n        total_error = (self.alpha * value_error.view(-1).float() + (1 - self.alpha) * policy_error).mean()\n        return total_error\n    \n\ndef train(net, dataset, epoch_stop=20, cpu=0):\n    torch.manual_seed(cpu)\n    cuda = torch.cuda.is_available()\n    net.train()\n    \n    # Loss function and optimizer\n    criterion = AlphaLoss()\n    optimizer = optim.Adam(net.parameters(), lr=0.001)\n    scheduler = optim.lr_scheduler.MultiStepLR(optimizer, milestones=[100, 200, 300, 400], gamma=0.2)\n    \n    train_set = board_data(dataset)\n    train_loader = DataLoader(train_set, batch_size= 30, shuffle=True, num_workers=0, pin_memory=False)\n    \n    # To store loss values for plotting\n    losses_per_epoch = []\n\n    for epoch in range(epoch_stop):\n        print(f\"Start training... Epoch {epoch+1}\")\n        \n        total_loss = 0.0\n        losses_per_batch = []\n        \n        for i, data in enumerate(train_loader, 0):\n            state, policy, value = data\n            if cuda:\n                state, policy, value = state.cuda().float(), policy.float().cuda(), value.cuda().float()\n            \n            optimizer.zero_grad()  # Zero gradients before backward pass\n            \n            # Forward pass\n            policy_pred, value_pred = net(state)\n            \n            # Calculate loss\n            loss = criterion(value_pred[:, 0], value, policy_pred, policy)\n            loss.backward()  # Backpropagation\n            optimizer.step()  # Optimizer step to update parameters\n            \n            total_loss += loss.item()\n            if i % 10 == 9:  # Print every 10 mini-batches\n                print(f'Process ID: {os.getpid()} [Epoch: {epoch + 1}, {i + 1} points] total loss per batch: {total_loss / 10:.3f}')\n                print(f\"Policy: {policy[0].argmax().item()}, Predicted: {policy_pred[0].argmax().item()}\")\n                print(f\"Value: {value[0].item()}, Predicted: {value_pred[0, 0].item()}\")\n                \n                losses_per_batch.append(total_loss / 10)\n                total_loss = 0.0\n        \n        # Calculate average loss per epoch\n        losses_per_epoch.append(sum(losses_per_batch) / len(losses_per_batch))\n        \n        # Early stopping criteria based on loss convergence\n        if len(losses_per_epoch) > 100:\n            recent_loss = sum(losses_per_epoch[-4:-1]) / 3\n            previous_loss = sum(losses_per_epoch[-16:-13]) / 3\n            if abs(recent_loss - previous_loss) <= 0.01:\n                print(\"Early stopping criteria met, ending training.\")\n                break\n        \n        scheduler.step()  # Update learning rate based on scheduler\n        \n    # Plot loss vs epoch\n    fig = plt.figure()\n    ax = fig.add_subplot(222)\n    ax.scatter([e for e in range(1, epoch_stop + 1)], losses_per_epoch)\n    ax.set_xlabel(\"Epoch\")\n    ax.set_ylabel(\"Loss per batch\")\n    ax.set_title(\"Loss vs Epoch\")\n    \n    # Save the plot\n    plt.savefig(os.path.join(\"./model_data/\", f\"Loss_vs_Epoch_{datetime.datetime.today().strftime('%Y-%m-%d')}.png\"))\n    \n    print('Finished Training')\n\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731848721629_-1348290655","id":"20241117-200521_829838187","dateCreated":"2024-11-17T20:05:21+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17977"},{"title":"Montel Carlo Tree Search","text":"%pyspark\ndef save_as_pickle(filename, data):\n    directory = \"./datasets/iter2/\"\n    if not os.path.exists(directory):\n        os.makedirs(directory)  # Tạo thư mục nếu chưa tồn tại\n    completeName = os.path.join(directory, filename)\n    with open(completeName, 'wb') as output:\n        pickle.dump(data, output)\n    print(\"Save pickle successfully\")\n\n\ndef load_pickle(filename):\n    completeName = os.path.join(\"\", filename)\n    with open(completeName, 'rb') as pkl_file:\n        data = pickle.load(pkl_file)\n    return data\n\nclass Node:\n    def __init__(self, state, player=1, prior=0, parent=None):\n        self.s = state  # State of the node\n        self.children = []  # List of child nodes\n        self.a = None  # Action taken to reach this node\n        self.player = player  # Player to move (1 for white, -1 for black)\n        self.prior = prior  # Prior probability from neural network\n        self.q = 0  # Q-value\n        self.n = 0  # Visit count\n        self.parent = parent  # Parent node\n\n    def add_child(self, child, action):\n        self.children.append(child)\n        child.a = action\n\n\nclass MCTSAlphaZero:\n    def __init__(self, model, c, alpha_net):\n        self.c = c  # Exploration constant\n        self.model = model  # Environment model for simulations\n        self.alpha_net = alpha_net  # Neural network to provide P(s, a) and reward\n        self.nodes = {}  # Cache for nodes\n\n    def ucb_score(self, node, child):\n        q = child.q\n        p = child.prior\n        n_parent = max(node.n, 1)\n        n_child = child.n\n        u = self.c * p * np.sqrt(n_parent) / (1 + n_child)\n        return q + u\n\n    def select(self, node):\n        \"\"\"Select child with the highest UCB score.\"\"\"\n        return max(node.children, key=lambda child: self.ucb_score(node, child))\n\n    def expand(self, node):\n        \"\"\"Expand a leaf node using the AlphaZero network.\"\"\"\n        if node.s in self.nodes:\n            return self.nodes[node.s]\n        # Lấy policy (4095 xác suất cho các hành động) và reward từ alpha_net\n        with torch.no_grad():\n            input_tensor = node.s.clone().detach() if isinstance(node.s, torch.Tensor) else torch.tensor(node.s)\n            policy, value = self.alpha_net(input_tensor.unsqueeze(0).float())\n        reward = value.item()\n    \n        policy = policy.squeeze(0)  # Đảm bảo `policy` là tensor 1D\n        all_action_index = get_all_action_index(node.s, node.player)\n\n        mask = torch.zeros_like(policy, dtype=torch.bool)\n        mask[all_action_index] = True\n\n        # Tính tổng xác suất của các hành động không hợp lệ\n        invalid_policy_sum = policy[~mask].sum()\n\n        # Đặt xác suất của các hành động không hợp lệ về 0\n        policy[~mask] = 0.0\n\n        # Chia đều xác suất của các hành động không hợp lệ cho các hành động hợp lệ\n        if len(all_action_index) > 0:\n            extra_prob = invalid_policy_sum / len(all_action_index)\n            policy[all_action_index] += extra_prob\n\n        # Tiếp tục xử lý các hành động hợp lệ\n        for action in all_action_index:\n            next_state, next_player, terminated, truncation, step_check = self.model(node.s, action, node.player)\n            if step_check:\n                child = Node(next_state, next_player, policy[action], parent=node)\n                node.add_child(child, action)\n            # Kiểm tra nếu trò chơi đã kết thúc\n            if terminated:\n                child.q = 1 # Nếu game đã kết thúc, gán reward cho q-value của node\n                child.n = 1  # Đặt lượt thăm là 1\n                return node.player * 1  # Không cần mở rộng thêm nữa\n            if truncation:\n                child.q = 0  # Nếu game bị cắt ngắn, gán q-value là 0\n                child.n = 1  # Đặt lượt thăm là 1\n                return 0  # Không cần mở rộng thêm nữa\n                \n        self.nodes[node.s] = node\n        return reward\n\n    def simulate(self, node):\n        \"\"\"Simulate using the reward from neural network.\"\"\"\n        with torch.no_grad():\n            policy, value = self.alpha_net(torch.tensor(node.s).unsqueeze(0).float())\n        reward = value.item()\n        # _, reward = self.alpha_net.predict(node.s)\n        return reward\n\n    def backup(self, path, reward):\n        \"\"\"Propagate the reward back through the path.\"\"\"\n        for node in reversed(path):\n            node.q = (node.q * node.n + reward * node.player * (-1)) / (node.n + 1)\n            node.n += 1\n\n    def get_policy(self, root, tau=1):\n        \"\"\"Calculate the policy based on visit counts.\"\"\"\n        visits = np.zeros(4095)  # Khởi tạo mảng visits với kích thước 4095, mỗi phần tử là số lượt thăm\n        \n        # Cập nhật số lượt thăm của mỗi hành động\n        for child in root.children:\n            visits[child.a] = child.n \n        \n        # Làm mềm xác suất với tau\n        if tau == 0:\n            # Nếu tau = 0, chọn hành động có số lượt thăm cao nhất\n            best_action = np.argmax(visits)\n            policy = np.zeros(4095)\n            policy[best_action] = 1  # Đặt xác suất hành động tốt nhất là 1\n        else:\n            visits = visits ** (1 / tau)\n            visits_sum = np.sum(visits)\n            \n            if visits_sum > 0:\n                policy = visits / visits_sum  # Chuẩn hóa để tổng xác suất bằng 1\n            else:\n                policy = np.zeros(4095)  # Nếu không có lượt thăm nào, trả về policy bằng 0\n        \n        policy = policy.reshape(4095, 1)  # Chuyển đổi thành dạng (4095, 1)\n        return policy\n\n\n    def search(self, game_state, player, num_reads):\n        root = Node(game_state, player= player)\n        self.expand(root)\n\n        for i in range(num_reads):\n            leaf = root\n            path = [leaf]\n            # Selection: Chọn nút con có UCB score cao nhất\n            while leaf.children:\n                leaf = self.select(leaf)\n                path.append(leaf)\n\n            next_state, next_player, terminated, truncation, step_check = self.model(leaf.parent.s, leaf.a, leaf.parent.player) # Sai đây, a trong node là hành động dể đến được s\n            if terminated or truncation:\n                # Nếu game đã kết thúc (checkmate, stalemate), thực hiện backup ngay lập tức\n                value_estimate = self.simulate(leaf)\n                self.backup(path, value_estimate)\n                continue\n            \n            # Expansion: Mở rộng nút con nếu chưa được mở rộng\n            if leaf.n == 0:\n                value_estimate = self.expand(leaf)\n            else:\n                value_estimate = self.simulate(leaf)\n            # Backup: Cập nhật giá trị cho các nút trên đường đi\n            self.backup(path, value_estimate)\n        # Chọn hành động tốt nhất từ chính các lượt thăm\n        policy = self.get_policy(root, tau=1)\n        best_action = max(root.children, key=lambda child: child.n).a\n        # print(\"best_action: \", best_action)\n        return best_action, policy\n    \n    def MCTS_self_play(self, num_games, cpu = 1):\n        for i in range(num_games):\n            # Initializing the chess environment\n            initial_board = [  \n                [5, 3, 4, 9, 10, 4, 3, 5],  # Rooks, Knights, Bishopsueen, King, Bishops, Knights, Rooks\n                [1, 1, 1, 1, 1, 1, 1, 1],   # White Pawns\n                [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n                [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n                [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n                [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n                [-1, -1, -1, -1, -1, -1, -1, -1],  # Black Pawns\n                [-5, -3, -4, -9, -10, -4, -3, -5]  # Rooks, Knights, Bishops, Queen, King, Bishops, Knights, Rooks\n            ]\n            chess = ChessEnv(board=initial_board, player_turn=0)\n            dataset = [] # to get state, policy, value for neural network training\n            states = []\n            value = 0\n            count = 0\n            while True:\n                # MCTS\n                board_state, player_turn = chess.getState()  \n                board_state = board_state.copy()\n                player = 1 if (player_turn % 2) == 0 else -1\n                board_tensor = board_to_tensor(board_state)\n                best_action, policy = self.search(board_tensor, player, 300)\n                states.append(board_state)  \n                action = index_to_action(best_action)\n                chess.step(action[0], action[1])\n                value += chess.getScore(player=1, action=action, pre_state= board_state)\n                print(count, value)\n                dataset.append([board_tensor, policy])\n                count += 1\n                if chess.is_term or chess.is_truncate:\n                    break\n\n            dataset_p = []\n            for idx, data in enumerate(dataset):\n                s,p = data\n                if idx == 0:\n                    dataset_p.append([s,p, 0.0])\n                else:\n                    dataset_p.append([s,p,value])\n            del dataset\n            save_as_pickle(\"dataset_cpu%i_%i_%s\" % (cpu, i, datetime.datetime.today().strftime(\"%Y-%m-%d\")), dataset_p)\n            print(\"dataset_cpu%i_%i_%s\" % (cpu,i, datetime.datetime.today().strftime(\"%Y-%m-%d\")))\n            ","user":"anonymous","dateUpdated":"2024-11-17T22:23:59+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731848766754_-1537415685","id":"20241117-200606_97752798","dateCreated":"2024-11-17T20:06:06+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17978"},{"text":"%md\n# Person vs Person","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Person vs Person</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1731848999895_867506757","id":"20241117-200959_2058830086","dateCreated":"2024-11-17T20:09:59+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17979"},{"text":"%pyspark\ndef get_board_action(valid_action = None):\n    board_action = [[0 for _ in range(8)] for _ in range(8)]\n    if valid_action is not None:\n        for a in valid_action:\n            board_action[a[0]][a[1]] = 1\n    return board_action\n# Initializing the chess environment\ninitial_board = [  \n    [5, 3, 4, 9, 10, 4, 3, 5],  # Rooks, Knights, Bishopsueen, King, Bishops, Knights, Rooks\n    [1, 1, 1, 1, 1, 1, 1, 1],   # White Pawns\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [-1, -1, -1, -1, -1, -1, -1, -1],  # Black Pawns\n    [-5, -3, -4, -9, -10, -4, -3, -5]  # Rooks, Knights, Bishops, Queen, King, Bishops, Knights, Rooks\n]\nchess = ChessEnv(board=initial_board, player_turn=0)\nboard_action = get_board_action()\n# Checking the initial state\nstate, player_turn = chess.getState()\n\npopUpVisible = bool(chess.pos_pawn_shielding)\nz.z.angularBind(\"popUpVisible\", popUpVisible)\nz.z.angularBind(\"board_action\", board_action)\nz.z.angularBind(\"initial_board\", state.tolist())\nz.z.angularBind(\"player_turn\", int(player_turn))\nz.z.angularBind(\"promotion_piece\", \"\")","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731480764241_-1646005460","id":"20241024-224626_22967158","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17980"},{"text":"%pyspark\nstart_row, start_col, end_row, end_col = None, None,None, None","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731480764242_2141542593","id":"20241107-211304_26994743","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17981"},{"text":"%pyspark\n# Lấy tọa độ x, y từ angular\nx = z.z.angular(\"x\")  \ny = z.z.angular(\"y\")  \npromotion_piece = z.z.angular(\"promotion_piece\")\nif start_row is None or start_col is None: # Nếu chưa có quân nào được chọn thì lấy điểm xuất phát\n    start_row, start_col = int(float(x)), int(float(y))\n    valid_action = chess.getSpaceAction([start_row, start_col])\n    board_action = get_board_action(valid_action)\nelif start_row == int(float(x)) and start_col == int(float(y)): # Chọn lại quân đã chọn thì hủy\n    start_row, start_col, end_row, end_col = None, None,None, None\n    board_action = get_board_action()\nelse: # Chọn lần hai thì lấy cho đích \n    end_row, end_col = int(float(x)), int(float(y))\nif start_row is not None and start_col is not None and end_row is not None and end_col is not None: # Có đủ tọa độ đầu và cuối thì cho thực hiện hành động\n    chess.step([start_row, start_col], [end_row, end_col])\n    start_row, start_col, end_row, end_col = None, None,None, None\n    board_action = get_board_action()\n    \nif promotion_piece is not None:\n    chess.pawn_shielding(int(float(promotion_piece)))\n# Retrieve the updated game state\nstate, player_turn = chess.getState()\nprint(\"Is term: \", chess.is_term)\nprint(\"Check mate: \", chess.is_check)\nif chess.is_term:\n    chess.reset()\npopUpVisible = bool(chess.pos_pawn_shielding)\nz.z.angularBind(\"popUpVisible\", popUpVisible)\nz.z.angularBind(\"board_action\", board_action)\nz.z.angularBind(\"initial_board\", state.tolist())\nz.z.angularBind(\"player_turn\", int(player_turn))\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:37+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true,"lineNumbers":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Is term:  False\nCheck mate:  False\n"}]},"apps":[],"jobName":"paragraph_1731480764244_-599491951","id":"20241102-121352_17962856","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:37+0700","dateFinished":"2024-11-17T22:13:37+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17982"},{"text":"%angular\r\n<style>\r\n    .boardCell {\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 60px;\r\n        border: 1px solid black;\r\n        text-align: center;\r\n    }\r\n    \r\n    .boardContainer {\r\n        position: relative;\r\n        line-height: 0;\r\n        display: inline-block;\r\n    }\r\n\r\n    .columnLabels,\r\n    .rowLabels {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        position: absolute;\r\n        \r\n        font-weight: bold;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    .columnLabels {\r\n        top: 100%;\r\n        width: 100%;\r\n        justify-content: space-between;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .rowLabels {\r\n        left: 0;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        top: -30px;\r\n        margin-left: -30px;\r\n    }\r\n\r\n    .even_cell {\r\n        background-color: #6e9c51;\r\n    }\r\n\r\n    .odd_cell {\r\n        background-color: #e8e9c5;\r\n    }\r\n\r\n    .cell button {\r\n        width: 100%;\r\n        height: 100%;\r\n        border: none;\r\n        font-size: 40px;\r\n        line-height: 1.5;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 0;\r\n    }\r\n\r\n    .btnEmptyCell {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .valid_action_cell {\r\n        box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.7); \r\n    }\r\n\r\n    .columnLabels span, .rowLabels span {\r\n        font-size: 20px;\r\n    }\r\n\r\n    /* Optional: Hover effect */\r\n    .valid_action_cell:hover {\r\n        box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.9);\r\n    }\r\n    .pop-up {\r\n        display: block; \r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: white;\r\n        border: 2px solid black;\r\n        padding: 20px;\r\n        text-align: center;\r\n        z-index: 1000;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n    }\r\n\r\n    .pop-up label {\r\n        display: block;\r\n        margin-bottom: 20px;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: blue;\r\n    }\r\n\r\n    .pop-up button {\r\n        padding: 10px 20px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div class=\"pop-up\" ng-show=\"popUpVisible\">\r\n        <label>Choice one piece </label>\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 5, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♖</button> \r\n\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 9, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♕</button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 3, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♘  </button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 4, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♗</button> \r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div class=\"boardContainer\">\r\n                <div class=\"boardRow\" ng-repeat=\"(i, row) in initial_board track by $index\">\r\n                    <div class=\"boardCell\" ng-repeat=\"(j, cell) in row track by $index\">\r\n                        <!-- White Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == 5\">\r\n                            <button\r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856');z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♖</button> <!-- White Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♘</button> <!-- White Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♗</button> <!-- White Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♕</button> <!-- White Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 10\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♔</button> <!-- White King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♙</button> <!-- White Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Black Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == -5\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♜</button> <!-- Black Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♞</button> <!-- Black Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♝</button> <!-- Black Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♛</button> <!-- Black Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -10\">\r\n                            <button  \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856');  z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♚</button> <!-- Black King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♟</button> <!-- Black Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Empty Cells -->\r\n                        <div class=\"cell\" ng-if=\"cell == 0\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnEmptyCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                                    ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\r\n                            \"\r\n                            >&nbsp;</button>\r\n                            \r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","user":"anonymous","dateUpdated":"2024-11-17T22:13:38+0700","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\r\n    .boardCell {\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 60px;\r\n        border: 1px solid black;\r\n        text-align: center;\r\n    }\r\n    \r\n    .boardContainer {\r\n        position: relative;\r\n        line-height: 0;\r\n        display: inline-block;\r\n    }\r\n\r\n    .columnLabels,\r\n    .rowLabels {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        position: absolute;\r\n        \r\n        font-weight: bold;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    .columnLabels {\r\n        top: 100%;\r\n        width: 100%;\r\n        justify-content: space-between;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .rowLabels {\r\n        left: 0;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        top: -30px;\r\n        margin-left: -30px;\r\n    }\r\n\r\n    .even_cell {\r\n        background-color: #6e9c51;\r\n    }\r\n\r\n    .odd_cell {\r\n        background-color: #e8e9c5;\r\n    }\r\n\r\n    .cell button {\r\n        width: 100%;\r\n        height: 100%;\r\n        border: none;\r\n        font-size: 40px;\r\n        line-height: 1.5;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 0;\r\n    }\r\n\r\n    .btnEmptyCell {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .valid_action_cell {\r\n        box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.7); \r\n    }\r\n\r\n    .columnLabels span, .rowLabels span {\r\n        font-size: 20px;\r\n    }\r\n\r\n    /* Optional: Hover effect */\r\n    .valid_action_cell:hover {\r\n        box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.9);\r\n    }\r\n    .pop-up {\r\n        display: block; \r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: white;\r\n        border: 2px solid black;\r\n        padding: 20px;\r\n        text-align: center;\r\n        z-index: 1000;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n    }\r\n\r\n    .pop-up label {\r\n        display: block;\r\n        margin-bottom: 20px;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: blue;\r\n    }\r\n\r\n    .pop-up button {\r\n        padding: 10px 20px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div class=\"pop-up\" ng-show=\"popUpVisible\">\r\n        <label>Choice one piece </label>\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 5, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♖</button> \r\n\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 9, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♕</button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 3, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♘  </button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 4, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n        >♗</button> \r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div class=\"boardContainer\">\r\n                <div class=\"boardRow\" ng-repeat=\"(i, row) in initial_board track by $index\">\r\n                    <div class=\"boardCell\" ng-repeat=\"(j, cell) in row track by $index\">\r\n                        <!-- White Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == 5\">\r\n                            <button\r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856');z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♖</button> <!-- White Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♘</button> <!-- White Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♗</button> <!-- White Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♕</button> <!-- White Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 10\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♔</button> <!-- White King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♙</button> <!-- White Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Black Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == -5\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♜</button> <!-- Black Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♞</button> <!-- Black Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♝</button> <!-- Black Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♛</button> <!-- Black Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -10\">\r\n                            <button  \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856');  z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♚</button> <!-- Black King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♟</button> <!-- Black Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Empty Cells -->\r\n                        <div class=\"cell\" ng-if=\"cell == 0\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnEmptyCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241102-121352_17962856'); z.angularBind('y', j, '20241102-121352_17962856'); z.angularBind('promotion_piece', None, '20241102-121352_17962856'); z.runParagraph('20241102-121352_17962856');\"\r\n                                    ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\r\n                            \"\r\n                            >&nbsp;</button>\r\n                            \r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"}]},"apps":[],"jobName":"paragraph_1731480764245_273766132","id":"20241024-153622_24494191","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:38+0700","dateFinished":"2024-11-17T22:13:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17983"},{"text":"%md\n# Person vs Agent","user":"anonymous","dateUpdated":"2024-11-17T22:13:38+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Person vs Agent</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1731849531691_-441835958","id":"20241117-201851_914159245","dateCreated":"2024-11-17T20:18:51+0700","dateStarted":"2024-11-17T22:13:38+0700","dateFinished":"2024-11-17T22:13:38+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17984"},{"text":"%pyspark\nnet = ChessNet()\ncuda = torch.cuda.is_available()\nif cuda:\n    net.cuda()\nnet_to_train=\"current_net_trained_iter1.pth.tar\"\ncurrent_net_filename = os.path.join(\"F:/University_HCMUTE/N4_HK1/Reinforcement_learning/AlphaZero/model_data/\", net_to_train)\ncheckpoint = torch.load(current_net_filename)\nnet.load_state_dict(checkpoint['state_dict'])\nMCTS_play = MCTSAlphaZero(envModel, 2, net)","user":"anonymous","dateUpdated":"2024-11-17T22:40:11+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731480764249_-780737410","id":"20241109-203401_2729415","dateCreated":"2024-11-13T13:52:44+0700","dateStarted":"2024-11-17T22:13:38+0700","dateFinished":"2024-11-17T22:13:39+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17985"},{"text":"%pyspark\n# Initializing the chess environment\ninitial_board = [  \n    [5, 3, 4, 9, 10, 4, 3, 5],  # Rooks, Knights, Bishopsueen, King, Bishops, Knights, Rooks\n    [1, 1, 1, 1, 1, 1, 1, 1],   # White Pawns\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [0, 0, 0, 0, 0, 0, 0, 0],   # Empty\n    [-1, -1, -1, -1, -1, -1, -1, -1],  # Black Pawns\n    [-5, -3, -4, -9, -10, -4, -3, -5]  # Rooks, Knights, Bishops, Queen, King, Bishops, Knights, Rooks\n]\nchess = ChessEnv(board=initial_board, player_turn=0)\nboard_action = get_board_action()\n# Checking the initial state\nstate, player_turn = chess.getState()\n\npopUpVisible = bool(chess.pos_pawn_shielding)\nz.z.angularBind(\"popUpVisible\", popUpVisible)\nz.z.angularBind(\"board_action\", board_action)\nz.z.angularBind(\"initial_board\", state.tolist())\nz.z.angularBind(\"player_turn\", int(player_turn))\nz.z.angularBind(\"promotion_piece\", \"\")","user":"anonymous","dateUpdated":"2024-11-17T22:19:25+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731851133109_-290700536","id":"20241117-204533_1504929583","dateCreated":"2024-11-17T20:45:33+0700","dateStarted":"2024-11-17T22:19:25+0700","dateFinished":"2024-11-17T22:19:25+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17986"},{"text":"%pyspark\nstate, player_turn = chess.getState()\nif player_turn % 2 == 0:\n    # Lấy tọa độ x, y từ angular\n    x = z.z.angular(\"x\")  \n    y = z.z.angular(\"y\")  \n    promotion_piece = z.z.angular(\"promotion_piece\")\n    if start_row is None or start_col is None: # Nếu chưa có quân nào được chọn thì lấy điểm xuất phát\n        start_row, start_col = int(float(x)), int(float(y))\n        valid_action = chess.getSpaceAction([start_row, start_col])\n        board_action = get_board_action(valid_action)\n    elif start_row == int(float(x)) and start_col == int(float(y)): # Chọn lại quân đã chọn thì hủy\n        start_row, start_col, end_row, end_col = None, None,None, None\n        board_action = get_board_action()\n    else: # Chọn lần hai thì lấy cho đích \n        end_row, end_col = int(float(x)), int(float(y))\n    if start_row is not None and start_col is not None and end_row is not None and end_col is not None: # Có đủ tọa độ đầu và cuối thì cho thực hiện hành động\n        chess.step([start_row, start_col], [end_row, end_col])\n        start_row, start_col, end_row, end_col = None, None,None, None\n        board_action = get_board_action()\n    \n    if promotion_piece is not None:\n        chess.pawn_shielding(int(float(promotion_piece)))\n        \nstate, player_turn = chess.getState()\nif player_turn % 2 != 0:\n    # Máy đánh\n    state_tensor = board_to_tensor(state)\n    p = -1\n    best_action, _ = MCTS_play.search(state_tensor, p, 20)\n    action = index_to_action(best_action)\n    chess.step(action[0], action[1])\n    board_action = get_board_action()\n\nstate, player_turn = chess.getState()\nif chess.is_check:\n    player_name = \"Bạn\" if player_turn % 2 != 0 else \"Máy\"\n    print(f\"{player_name} Chiếu tướng\")\nif chess.is_term:\n    player_name = \"Bạn\" if player_turn % 2 != 0 else \"Máy\"\n    print(f\"Hết cờ!!! {player_name} thắng\")\n    chess.reset()\npopUpVisible = bool(chess.pos_pawn_shielding)\nz.z.angularBind(\"popUpVisible\", popUpVisible)\nz.z.angularBind(\"board_action\", board_action)\nz.z.angularBind(\"initial_board\", state.tolist())\nz.z.angularBind(\"player_turn\", int(player_turn))\n","user":"anonymous","dateUpdated":"2024-11-17T22:28:28+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1731851142230_484615213","id":"20241117-204542_165954839","dateCreated":"2024-11-17T20:45:42+0700","dateStarted":"2024-11-17T22:28:28+0700","dateFinished":"2024-11-17T22:28:28+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17987"},{"text":"%angular\r\n<style>\r\n    .boardCell {\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 60px;\r\n        border: 1px solid black;\r\n        text-align: center;\r\n    }\r\n    \r\n    .boardContainer {\r\n        position: relative;\r\n        line-height: 0;\r\n        display: inline-block;\r\n    }\r\n\r\n    .columnLabels,\r\n    .rowLabels {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        position: absolute;\r\n        \r\n        font-weight: bold;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    .columnLabels {\r\n        top: 100%;\r\n        width: 100%;\r\n        justify-content: space-between;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .rowLabels {\r\n        left: 0;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        top: -30px;\r\n        margin-left: -30px;\r\n    }\r\n\r\n    .even_cell {\r\n        background-color: #6e9c51;\r\n    }\r\n\r\n    .odd_cell {\r\n        background-color: #e8e9c5;\r\n    }\r\n\r\n    .cell button {\r\n        width: 100%;\r\n        height: 100%;\r\n        border: none;\r\n        font-size: 40px;\r\n        line-height: 1.5;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 0;\r\n    }\r\n\r\n    .btnEmptyCell {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .valid_action_cell {\r\n        box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.7); \r\n    }\r\n\r\n    .columnLabels span, .rowLabels span {\r\n        font-size: 20px;\r\n    }\r\n\r\n    /* Optional: Hover effect */\r\n    .valid_action_cell:hover {\r\n        box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.9);\r\n    }\r\n    .pop-up {\r\n        display: block; \r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: white;\r\n        border: 2px solid black;\r\n        padding: 20px;\r\n        text-align: center;\r\n        z-index: 1000;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n    }\r\n\r\n    .pop-up label {\r\n        display: block;\r\n        margin-bottom: 20px;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: blue;\r\n    }\r\n\r\n    .pop-up button {\r\n        padding: 10px 20px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div class=\"pop-up\" ng-show=\"popUpVisible\">\r\n        <label>Choice one piece </label>\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 5, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♖</button> \r\n\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 9, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♕</button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 3, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♘  </button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 4, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♗</button> \r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div class=\"boardContainer\">\r\n                <div class=\"boardRow\" ng-repeat=\"(i, row) in initial_board track by $index\">\r\n                    <div class=\"boardCell\" ng-repeat=\"(j, cell) in row track by $index\">\r\n                        <!-- White Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == 5\">\r\n                            <button\r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839');z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♖</button> <!-- White Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♘</button> <!-- White Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♗</button> <!-- White Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♕</button> <!-- White Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 10\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♔</button> <!-- White King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♙</button> <!-- White Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Black Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == -5\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♜</button> <!-- Black Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♞</button> <!-- Black Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♝</button> <!-- Black Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♛</button> <!-- Black Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -10\">\r\n                            <button  \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♚</button> <!-- Black King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♟</button> <!-- Black Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Empty Cells -->\r\n                        <div class=\"cell\" ng-if=\"cell == 0\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnEmptyCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\r\n                            \"\r\n                            >&nbsp;</button>\r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","user":"anonymous","dateUpdated":"2024-11-17T22:13:39+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\r\n    .boardCell {\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 60px;\r\n        border: 1px solid black;\r\n        text-align: center;\r\n    }\r\n    \r\n    .boardContainer {\r\n        position: relative;\r\n        line-height: 0;\r\n        display: inline-block;\r\n    }\r\n\r\n    .columnLabels,\r\n    .rowLabels {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        position: absolute;\r\n        \r\n        font-weight: bold;\r\n        padding: 0;\r\n        margin: 0;\r\n    }\r\n\r\n    .columnLabels {\r\n        top: 100%;\r\n        width: 100%;\r\n        justify-content: space-between;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .rowLabels {\r\n        left: 0;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        top: -30px;\r\n        margin-left: -30px;\r\n    }\r\n\r\n    .even_cell {\r\n        background-color: #6e9c51;\r\n    }\r\n\r\n    .odd_cell {\r\n        background-color: #e8e9c5;\r\n    }\r\n\r\n    .cell button {\r\n        width: 100%;\r\n        height: 100%;\r\n        border: none;\r\n        font-size: 40px;\r\n        line-height: 1.5;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding: 0;\r\n    }\r\n\r\n    .btnEmptyCell {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .valid_action_cell {\r\n        box-shadow: inset 0 0 30px rgba(0, 0, 0, 0.7); \r\n    }\r\n\r\n    .columnLabels span, .rowLabels span {\r\n        font-size: 20px;\r\n    }\r\n\r\n    /* Optional: Hover effect */\r\n    .valid_action_cell:hover {\r\n        box-shadow: inset 0 0 50px rgba(0, 0, 0, 0.9);\r\n    }\r\n    .pop-up {\r\n        display: block; \r\n        position: fixed;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: white;\r\n        border: 2px solid black;\r\n        padding: 20px;\r\n        text-align: center;\r\n        z-index: 1000;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\r\n    }\r\n\r\n    .pop-up label {\r\n        display: block;\r\n        margin-bottom: 20px;\r\n        font-size: 18px;\r\n        font-weight: bold;\r\n        color: blue;\r\n    }\r\n\r\n    .pop-up button {\r\n        padding: 10px 20px;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n    }\r\n</style>\r\n\r\n<div class=\"container\">\r\n    <div class=\"pop-up\" ng-show=\"popUpVisible\">\r\n        <label>Choice one piece </label>\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 5, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♖</button> \r\n\r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 9, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♕</button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 3, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♘  </button> \r\n        <button\r\n        type=\"submit\" class=\"btnChessCell\" \r\n                ng-click=\"popUpVisible = false; z.angularBind('promotion_piece', 4, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n        >♗</button> \r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div class=\"boardContainer\">\r\n                <div class=\"boardRow\" ng-repeat=\"(i, row) in initial_board track by $index\">\r\n                    <div class=\"boardCell\" ng-repeat=\"(j, cell) in row track by $index\">\r\n                        <!-- White Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == 5\">\r\n                            <button\r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839');z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♖</button> <!-- White Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♘</button> <!-- White Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♗</button> <!-- White Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♕</button> <!-- White Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 10\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♔</button> <!-- White King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == 1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♙</button> <!-- White Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Black Pieces -->\r\n                        <div class=\"cell\" ng-if=\"cell == -5\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                   ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♜</button> <!-- Black Rook -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -3\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♞</button> <!-- Black Knight -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -4\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♝</button> <!-- Black Bishop -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -9\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♛</button> <!-- Black Queen -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -10\">\r\n                            <button  \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♚</button> <!-- Black King -->\r\n                        </div>\r\n                        <div class=\"cell\" ng-if=\"cell == -1\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnChessCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\"\r\n                            >♟</button> <!-- Black Pawn -->\r\n                        </div>\r\n\r\n                        <!-- Empty Cells -->\r\n                        <div class=\"cell\" ng-if=\"cell == 0\">\r\n                            <button \r\n                            type=\"submit\" class=\"btnEmptyCell\" \r\n                                    ng-click=\"z.angularBind('x', i, '20241117-204542_165954839'); z.angularBind('y', j, '20241117-204542_165954839'); z.angularBind('promotion_piece', None, '20241117-204542_165954839'); z.runParagraph('20241117-204542_165954839');\"\r\n                            ng-class=\"{\r\n                            'valid_action_cell': board_action[i][j] === 1,\r\n                            'even_cell': (i + j)  % 2 === 0,\r\n                            'odd_cell': (i + j)  % 2 !== 0}\r\n                            \"\r\n                            >&nbsp;</button>\r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"}]},"apps":[],"jobName":"paragraph_1731851577623_-71695435","id":"20241117-205257_35114357","dateCreated":"2024-11-17T20:52:57+0700","dateStarted":"2024-11-17T22:13:39+0700","dateFinished":"2024-11-17T22:13:39+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17988"},{"text":"%angular\n","user":"anonymous","dateUpdated":"2024-11-17T22:13:40+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1731852119960_935013106","id":"20241117-210159_9927246","dateCreated":"2024-11-17T21:01:59+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:17989"}],"name":"RL/Final","id":"2KCQE9MJ6","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"spark:shared_process":[{"name":"x","object":4,"noteId":"2KCQE9MJ6","paragraphId":"20241102-121352_17962856"},{"name":"y","object":5,"noteId":"2KCQE9MJ6","paragraphId":"20241102-121352_17962856"},{"name":"promotion_piece","noteId":"2KCQE9MJ6","paragraphId":"20241102-121352_17962856"},{"name":"board_action","object":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],"noteId":"2KCQE9MJ6"},{"name":"initial_board","object":[[5,3,4,9,10,4,3,5],[1,0,1,1,0,0,1,1],[0,1,0,0,0,0,0,0],[0,-3,0,0,1,0,0,0],[0,-1,0,0,-1,0,0,0],[0,0,0,-1,0,0,0,-3],[-1,0,-1,0,0,-1,0,-1],[-5,0,-4,-9,-10,-4,0,9]],"noteId":"2KCQE9MJ6"},{"name":"popUpVisible","object":true,"noteId":"2KCQE9MJ6"},{"name":"promotion_piece","object":"","noteId":"2KCQE9MJ6"},{"name":"player_turn","object":14,"noteId":"2KCQE9MJ6"},{"name":"x","object":7,"noteId":"2KCQE9MJ6","paragraphId":"20241117-204542_165954839"},{"name":"y","object":7,"noteId":"2KCQE9MJ6","paragraphId":"20241117-204542_165954839"},{"name":"promotion_piece","noteId":"2KCQE9MJ6","paragraphId":"20241117-204542_165954839"}]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}